"""remove workspace__users

Revision ID: 800ea858cae8
Revises: f7beb96d150d
Create Date: 2024-11-26 11:20:40.162837

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session
from sqlalchemy import text

# revision identifiers, used by Alembic.
revision = "800ea858cae8"
down_revision = "f7beb96d150d"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    migrate_roles_from_workspace_users()

    op.drop_table("workspace__users")
    op.add_column("teamspace", sa.Column("description", sa.Text(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("teamspace", "description")
    op.create_table(
        "workspace__users",
        sa.Column("workspace_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "role",
            sa.VARCHAR(length=5),
            server_default=sa.text("'BASIC'::character varying"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name="workspace__users_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["workspace_id"],
            ["workspace.id"],
            name="workspace__users_workspace_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "workspace_id", "user_id", name="workspace__users_pkey"
        ),
    )
    # ### end Alembic commands ###


def migrate_roles_from_workspace_users():
    # Establish a database connection
    bind = op.get_bind()
    session = Session(bind=bind)

    # Copy roles from `workspace__users` table to `user` table
    try:
        session.execute(
            text(
                """
                UPDATE "user"
                SET role = subquery.role
                FROM (
                    SELECT wu.user_id AS id, wu.role
                    FROM workspace__users wu
                ) AS subquery
                WHERE "user".id = subquery.id
                """
            )
        )
        session.commit()
    except Exception as e:
        session.rollback()
        print(f"Error migrating users: {e}")
    finally:
        session.close()
