import { Button } from "@/components/ui/button";
import { HostedEmbeddingModel } from "./interfaces";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Checkbox } from "../ui/checkbox";

const formSchema = z.object({
  model_name: z.string().min(1, {
    message: "Please enter the name of the Embedding Model",
  }),
  model_dim: z.number().min(1, {
    message:
      "Please enter the dimensionality of the embeddings generated by the model",
  }),
  query_prefix: z.string().optional(),
  passage_prefix: z.string().optional(),
  description: z.string().optional(),
  normalize: z.boolean(),
});

type FormValues = z.infer<typeof formSchema>;

export function CustomModelForm({
  onSubmit,
}: {
  onSubmit: (model: HostedEmbeddingModel) => void;
}) {
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      model_name: "",
      model_dim: undefined,
      query_prefix: "",
      passage_prefix: "",
      description: "",
      normalize: true,
    },
  });

  const onHandleSubmit = async (values: FormValues) => {
    onSubmit({
      ...values,
      api_key: null,
      provider_type: null,
      index_name: null,
      api_url: null,
      query_prefix: values.query_prefix ?? "",
      passage_prefix: values.passage_prefix ?? "",
      description: values.description ?? "",
    });
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onHandleSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="model_name"
          render={({ field }) => (
            <FormItem className="w-full">
              <FormLabel htmlFor="model_name">Model Name</FormLabel>
              <FormControl>
                <Input
                  placeholder="E.g. 'nomic-ai/nomic-embed-text-v1'"
                  {...field}
                />
              </FormControl>
              <FormDescription>
                The name of the model on Hugging Face
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="model_dim"
          render={({ field }) => (
            <FormItem className="w-full">
              <FormLabel htmlFor="model_dim">Model Dimension</FormLabel>
              <FormControl>
                <Input
                  type="number"
                  placeholder="E.g. '768'"
                  value={field.value || ""}
                  onChange={(e) => field.onChange(Number(e.target.value) || "")}
                />
              </FormControl>
              <FormDescription>
                The dimensionality of the embeddings generated by the model
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem className="w-full">
              <FormLabel htmlFor="description">Description</FormLabel>
              <FormControl>
                <Input placeholder="" {...field} />
              </FormControl>
              <FormDescription>Description of your model</FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="query_prefix"
          render={({ field }) => (
            <FormItem className="w-full">
              <FormLabel htmlFor="query_prefix">
                [Optional] Query Prefix
              </FormLabel>
              <FormControl>
                <Input placeholder="E.g. 'query: '" {...field} />
              </FormControl>
              <FormDescription>
                The prefix specified by the model creators which should be
                prepended to <i>queries</i> before passing them to the model.
                Many models do not have this, in which case this should be left
                empty.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="passage_prefix"
          render={({ field }) => (
            <FormItem className="w-full">
              <FormLabel htmlFor="passage_prefix">
                [Optional] Passage Prefix
              </FormLabel>
              <FormControl>
                <Input placeholder="E.g. 'passage: '" {...field} />
              </FormControl>
              <FormDescription>
                The prefix specified by the model creators which should be
                prepended to <i>passages</i> before passing them to the model.
                Many models do not have this, in which case this should be left
                empty.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="normalize"
          render={({ field }) => (
            <FormItem className="flex gap-2">
              <FormControl>
                <Checkbox
                  checked={field.value}
                  onCheckedChange={(checked) => field.onChange(checked)}
                />
              </FormControl>
              <FormLabel className="!mt-0 !mb-3 !space-y-1.5">
                <span>Normalize Embeddingsu</span>
                <p className="text-sm text-muted-foreground font-normal">
                  Whether or not to normalize the embeddings generated by the
                  model. When in doubt, leave this checked.
                </p>
              </FormLabel>
            </FormItem>
          )}
        />

        <div className="flex mt-2">
          <Button
            type="submit"
            disabled={form.formState.isSubmitting}
            className="w-64 mx-auto"
          >
            Choose
          </Button>
        </div>
      </form>
    </Form>
  );
}
