import { Button } from "@/components/ui/button";
import { HostedEmbeddingModel } from "./interfaces";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { Form } from "@/components/ui/form";
import { CheckboxForm, InputForm } from "../admin/connectors/Field";

const formSchema = z.object({
  model_name: z.string().min(1, {
    message: "Please enter the name of the Embedding Model",
  }),
  model_dim: z.number().min(1, {
    message:
      "Please enter the dimensionality of the embeddings generated by the model",
  }),
  query_prefix: z.string().optional(),
  passage_prefix: z.string().optional(),
  description: z.string().optional(),
  normalize: z.boolean(),
});

type FormValues = z.infer<typeof formSchema>;

export function CustomModelForm({
  onSubmit,
}: {
  onSubmit: (model: HostedEmbeddingModel) => void;
}) {
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      model_name: "",
      model_dim: undefined,
      query_prefix: "",
      passage_prefix: "",
      description: "",
      normalize: true,
    },
  });

  const onHandleSubmit = async (values: FormValues) => {
    onSubmit({
      ...values,
      api_key: null,
      provider_type: null,
      index_name: null,
      api_url: null,
      query_prefix: values.query_prefix ?? "",
      passage_prefix: values.passage_prefix ?? "",
      description: values.description ?? "",
    });
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onHandleSubmit)} className="space-y-4">
        <InputForm
          formControl={form.control}
          name="model_name"
          label="Model Name"
          placeholder="E.g. 'nomic-ai/nomic-embed-text-v1'"
          description="The name of the model on Hugging Face"
          isDescriptionBelow
        />

        <InputForm
          formControl={form.control}
          name="model_dim"
          type="number"
          label="Model Dimension"
          placeholder="E.g. '768'"
          description=" The dimensionality of the embeddings generated by the model"
          isDescriptionBelow
        />

        <InputForm
          formControl={form.control}
          name="description"
          label="Description"
          description="Description of your model"
          isDescriptionBelow
        />

        <InputForm
          formControl={form.control}
          name="query_prefix"
          label="[Optional] Query Prefix"
          description={
            <>
              The prefix specified by the model creators which should be
              prepended to <i>queries</i> before passing them to the model. Many
              models do not have this, in which case this should be left empty.
            </>
          }
          isDescriptionBelow
        />

        <InputForm
          formControl={form.control}
          name="passage_prefix"
          label="[Optional] Passage Prefix"
          description={
            <>
              The prefix specified by the model creators which should be
              prepended to <i>passages</i> before passing them to the model.
              Many models do not have this, in which case this should be left
              empty.
            </>
          }
          isDescriptionBelow
        />

        <CheckboxForm
          formControl={form.control}
          name="normalize"
          label="Normalize Embeddings"
          description=" Whether or not to normalize the embeddings generated by the
                  model. When in doubt, leave this checked."
        />

        <div className="flex mt-2">
          <Button
            type="submit"
            disabled={form.formState.isSubmitting}
            className="w-64 mx-auto"
          >
            Choose
          </Button>
        </div>
      </form>
    </Form>
  );
}
